{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     sex     bmi  children smoker     region      charges\n",
       "0   19  female  27.900         0    yes  southwest  16884.92400\n",
       "1   18    male  33.770         1     no  southeast   1725.55230\n",
       "2   28    male  33.000         3     no  southeast   4449.46200\n",
       "3   33    male  22.705         0     no  northwest  21984.47061\n",
       "4   32    male  28.880         0     no  northwest   3866.85520"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         False\n",
       "sex         False\n",
       "bmi         False\n",
       "children    False\n",
       "smoker      False\n",
       "region      False\n",
       "charges     False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "bmi         0\n",
       "children    0\n",
       "smoker      0\n",
       "region      0\n",
       "charges     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('insurance.csv')\n",
    "X = df.iloc[:,:-1]\n",
    "y = df.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,10))\n",
    "cor = df.corr()\n",
    "sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0.299008\n",
       "bmi         0.198341\n",
       "children    0.067998\n",
       "charges     1.000000\n",
       "Name: charges, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#correlation used for EDA\n",
    "cor_target = abs(cor['charges'])\n",
    "cor_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>103.5</td>\n",
       "      <td>331.5</td>\n",
       "      <td>459.0</td>\n",
       "      <td>287.5</td>\n",
       "      <td>1201.5</td>\n",
       "      <td>1176.0</td>\n",
       "      <td>1007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35.0</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>943.5</td>\n",
       "      <td>736.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>831.5</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>376.5</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>879.5</td>\n",
       "      <td>1217.0</td>\n",
       "      <td>532.5</td>\n",
       "      <td>831.5</td>\n",
       "      <td>308.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>510.5</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>124.0</td>\n",
       "      <td>287.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>487.0</td>\n",
       "      <td>1099.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>484.5</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>541.5</td>\n",
       "      <td>287.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>487.0</td>\n",
       "      <td>256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>968.0</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>722.0</td>\n",
       "      <td>1217.0</td>\n",
       "      <td>532.5</td>\n",
       "      <td>487.0</td>\n",
       "      <td>748.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>35.0</td>\n",
       "      <td>331.5</td>\n",
       "      <td>796.0</td>\n",
       "      <td>287.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>162.5</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>35.0</td>\n",
       "      <td>331.5</td>\n",
       "      <td>1124.0</td>\n",
       "      <td>287.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>831.5</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>180.5</td>\n",
       "      <td>331.5</td>\n",
       "      <td>302.0</td>\n",
       "      <td>287.5</td>\n",
       "      <td>532.5</td>\n",
       "      <td>1176.0</td>\n",
       "      <td>93.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>1259.0</td>\n",
       "      <td>331.5</td>\n",
       "      <td>562.5</td>\n",
       "      <td>287.5</td>\n",
       "      <td>1201.5</td>\n",
       "      <td>487.0</td>\n",
       "      <td>1173.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         age     sex     bmi  children  smoker  region  charges\n",
       "0      103.5   331.5   459.0     287.5  1201.5  1176.0   1007.0\n",
       "1       35.0  1000.5   943.5     736.5   532.5   831.5     59.0\n",
       "2      376.5  1000.5   879.5    1217.0   532.5   831.5    308.0\n",
       "3      510.5  1000.5   124.0     287.5   532.5   487.0   1099.0\n",
       "4      484.5  1000.5   541.5     287.5   532.5   487.0    256.0\n",
       "...      ...     ...     ...       ...     ...     ...      ...\n",
       "1333   968.0  1000.5   722.0    1217.0   532.5   487.0    748.0\n",
       "1334    35.0   331.5   796.0     287.5   532.5   162.5    120.0\n",
       "1335    35.0   331.5  1124.0     287.5   532.5   831.5     33.0\n",
       "1336   180.5   331.5   302.0     287.5   532.5  1176.0     93.0\n",
       "1337  1259.0   331.5   562.5     287.5  1201.5   487.0   1173.0\n",
       "\n",
       "[1338 rows x 7 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rank()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age        0.299008\n",
       "charges    1.000000\n",
       "Name: charges, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relevant_features = cor_target[cor_target>0.2]\n",
    "relevant_features\n",
    "#age is the feture that is most correlated to charges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import RidgeCV, LassoCV, Ridge, Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Feature importance using Lasso Model')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAesAAAJOCAYAAACXyi9hAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAAAczElEQVR4nO3df7Tkd13f8debhPAbgmZB8wOIGn7EHqKwQOpRiaKSRDFqsfywUFI05mgUT1HhoBUtKNpWpQo0ppgiYBMUYowSRVsPPzSA2VgIBBrOEpVsgmZDCCAoccOnf3y/Syc39+6d3dy7+87ex+OcObkz3+/MfOZzJ/Oc73dmv7fGGAEA+rrHoR4AALBvYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTVbRlW9pKpee6jHcTiqqmuq6rRDPY67u6p6XVW9fMl1/6aqvmWzx0QPYs1S5heGf6yqf1g4HbsBt3nQXmzGGL8wxvj+g3V/+1JVP1tVbzzU49goY4yvHmO8faNvt6qeV1V/vtG3e1fN4xpV9SsrLv+u+fLXHaKhcZgSa/bH08YY91843XgoB1NVRx7K+z9Qd9dxcycfTfKMFb/P5yb5yCEaD4cxseYuqaoHVdVvVtXHq+qGqnp5VR0xL/vKqvqzqvpEVd1cVb9dVUfPy96Q5GFJ/mDeSv/JqjqtqnatuP0vbn3PW6Nvrqo3VtWnkzxvX/e/yli/uDVbVY+Yt4DOrqrrq+qTVXVuVT2hqq6uqlur6lUL131eVf1FVf16VX2qqv5vVT1lYfmxVXVZVd1SVTur6gdW3O/iuM9N8pJML/T/UFXvn9c7u6o+XFWfqarrquoHF27jtKraVVUvrKqb5sd79sLy+1TVL1fV387j+/Oqus+87NSqumJ+TO/f1+7qeU6+auH8F3fLVtUxVfWH8+3cUlXvqqp7rPF7+p2qev38WK6pqu0Lt/m4qvo/87Lfrao31ZK7fleMdV/zta+xvmh+rnymqq7d+3usqntV1Sur6sb59Mqqutc+hvB3ST6Q5Knz9b8kydcluWzFOL9znoNbq+rtVfWYhWVfW1V/NY/lTUnuveK631FV75uve0VVPXZ/54nDg1hzV/1Wkj1JvirJ1yb5tiR7dzVXklckOTbJY5KckORnk2SM8ZwkH8v/31r/T0ve31lJ3pzk6CS/vc79L+NJSU5K8owkr0zyU0m+JclXJ/nXVfXkFetel+SYJC9Ncsn8Ap0kFyXZNT/Wpyf5hcWYrxj3byb5hSRvmh/7KfM6NyX5jiQPTHJ2kl+tqsct3MaXJXlQkuOSPD/Jq6vqwfOy/5Lk8Zli8SVJfjLJF6rquCRvTfLy+fIfT/KWqtq2H3O01wvnx7gtyUMzveFY63jF35nk4vnxXpbkVUlSVUcl+b0kr5vHc1GS7z6AsST7nq9Vx1pVj0pyXpInjDEekCm0fzNf56eSnJrka5KckuSJSX56nTG8PtPWdJI8M8nvJ/n83oVV9cj5Mf7YPJbLM71BPWqei0uTvCHTXPxukn+1cN3HJbkwyQ8m+dIkv5HksnXeQHCYEmv2x6XzO/xbq+rSqnpokjOS/NgY47NjjJuS/GqmF62MMXaOMf50jPH5McbuJL+S5Mlr3/xS3j3GuHSM8YVML9Jr3v+SXjbG+Kcxxp8k+WySi8YYN40xbkjyrkxvAPa6Kckrxxj/PMZ4U5Jrk3x7VZ2Q5OuTvGi+rfcleW2S56w27jHGP642kDHGW8cYHx2TdyT5kyTfsLDKPyf5j/P9X57kH5I8at5i/HdJXjDGuGGMcfsY44oxxueT/Jskl48xLp/v+0+T7Ehy5n7M0eL9f3mSh89jeNdY+48L/Pl8n7dnitHeNySnJjkyya/Nt3FJkr88gLGsN19rjfX2JPdKcnJV3XOM8TdjjI/O1/m+TPN70/x8/bnc8Xe4mt9LclpVPShTtF+/Yvkzkrx1/v/gnzO9qbpPpjdVpya5Z/7/c+rNSa5cuO4PJPmNMcZ759/pb2V6I3Dqfk0UhwWxZn981xjj6Pn0XUkenunF5uN7I57p3f9DkqSqHlJVF8+7HD+d5I2ZtkrviusXft7n/S/p7xd+/sdVzt9/4fwNK+L0t5m2pI9NcssY4zMrlh23xrhXVVVnVNV75t22t2YK6uJ8fWKMsWfh/Ofm8R2TaffpR3NnD0/yvQtvsm7N9Mbiy9cbzyr+c5KdSf5k3u384n2s+3crxnnvmj7bPTZ3nsd152Y168zXqmMdY+zMtJX7s0lump+fe78oeWym39tee3+/a5rfeL010xb4MWOMv1ixyh1uc36TeX2m58Zqc7F4/w9P8sIVv7sT1hsThyex5q64PtM7/WMWIv7AMcZXz8tfkWk36WPHGA/MtJVXC9dfuVX22ST33Xumps+eV+6uXfkiv6/732jHVdXi+B+W5Mb59CVV9YAVy25YY9x3Oj/v2nxLpi2vh44xjs60y7SyvpuT/FOSr1xl2fVJ3rAwP0ePMe43xvjFNW7rc1n4HWTa9T4NeIzPjDFeOMb4iiRPS/LvV+zqX8bHc+d5PGE/b2Pd+drXWMcY/3OM8fWZYjiS/NJ8szfOl+219/e7ntdn2u3+hlWW3eE258d9Qqbnxmpz8bCFn69P8vMrfnf3HWNctMSYOMyINQdsjPHxTLsef7mqHlhV96jpS2V7d3U/INOu2lvnz05/YsVN/H2Sr1g4/5FMW2DfXlX3zLS1subnc0vc/0Z7SJIfrap7VtX3Zvoc/vIxxvVJrkjyiqq69/wloOdn+kx9LX+f5BF7v/SU5KhMj3V3kj1VdUamz9/XNW+tXZjkV2r6otsRVfUv56C9McnTquqp8+X3runLasevcXPvS/Lsed3Ts/Cxxfxlp6+a4/LpTLuUb19mjAvePV/nvKo6sqrOyvTZ8L7UPO4vnrLOfK011qp6VFV98zw3/5Rp78nex3BRkp+uqm1VdUySn8k0f+t5R5JvTfLrqyz7nUwflTxlfk6/MNMbzCvmudiT6Tl1ZFV9z4q5+O9Jzq2qJ9XkfvP/Gw9YeScc/sSau+q5mV44P5Tkk5m+RLV3F+vPJXlckk9l2lV4yYrrviLTi+OtVfXjY4xPJfmhTJ/33pBpS3tX9m1f97/R3pvpy2g3J/n5JE8fY3xiXvasJI/ItCX1e0leOn8+vJbfnf/7iar6q3kX+o9menH/ZJJnZ8W3itfx45m+mXxlklsybS3eY34jcVamL1jtzrS19hNZ+//9F2TaEr0102e4ly4sOynJ/8r0BuzdSV4z9vPfVo8xbkvyPZnezNyaaW/LH2bhS1mr+LpMUV152td8rTXWeyX5xUy/w7/L9AbsJfN1Xp7p8/yrM83lX82XrfeYxhjjf48xblll2bXzY/z1+T6flulLlbctzMXz5sfwjCz8PzLG2JHpc+tXzct3zuuyBdXa3w8B9qqq5yX5/nn3KRuoqt6b5Pwxxv841GOBrmxZAwdVVT25qr5s3vX7b5M8NskfH+pxQWfrxrqqLqzpIAwfXGN5VdWv1XQgiKvrjv8uFGClRyV5f6aPR16Y6eOEjx/aIUFv6+4Gr6pvzPS5z+vHGP9ileVnJvmRTP9s4klJ/usY40mbMFYA2JLW3bIeY7wz0xdW1nJWppCPMcZ7khxdVZv1BR8A2HI24g8KHJc7HtRg13zZnXZrVdU5Sc5Jkvvd736Pf/SjH70Bdw8Adw9XXXXVzWOM/T7c70bEerWDNqy6b32McUGSC5Jk+/btY8eOHRtw9wBw91BVf7v+Wne2Ed8G35U7HoHo+Cx31B8AYAkbEevLkjx3/lb4qUk+5ZudALBx1t0NXlUXJTktyTE1/a3hl2b64wkZY5yf6Xi8Z2Y6us7nMv2pOgBgg6wb6zHGs9ZZPpL88IaNCAC4A0cwA4DmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGguaViXVWnV9W1VbWzql68yvIHVdUfVNX7q+qaqjp744cKAFvTurGuqiOSvDrJGUlOTvKsqjp5xWo/nORDY4xTkpyW5Jer6qgNHisAbEnLbFk/McnOMcZ1Y4zbklyc5KwV64wkD6iqSnL/JLck2bOhIwWALWqZWB+X5PqF87vmyxa9KsljktyY5ANJXjDG+MLKG6qqc6pqR1Xt2L179wEOGQC2lmViXatcNlacf2qS9yU5NsnXJHlVVT3wTlca44IxxvYxxvZt27bt51ABYGtaJta7kpywcP74TFvQi85OcsmY7Ezy10kevTFDBICtbZlYX5nkpKo6cf7S2DOTXLZinY8leUqSVNVDkzwqyXUbOVAA2KqOXG+FMcaeqjovyduSHJHkwjHGNVV17rz8/CQvS/K6qvpApt3mLxpj3LyJ4waALWPdWCfJGOPyJJevuOz8hZ9vTPJtGzs0ACBxBDMAaE+sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJpbKtZVdXpVXVtVO6vqxWusc1pVva+qrqmqd2zsMAFg6zpyvRWq6ogkr07yrUl2Jbmyqi4bY3xoYZ2jk7wmyeljjI9V1UM2abwAsOUss2X9xCQ7xxjXjTFuS3JxkrNWrPPsJJeMMT6WJGOMmzZ2mACwdS0T6+OSXL9wftd82aJHJnlwVb29qq6qqueudkNVdU5V7aiqHbt37z6wEQPAFrNMrGuVy8aK80cmeXySb0/y1CT/oaoeeacrjXHBGGP7GGP7tm3b9nuwALAVrfuZdaYt6RMWzh+f5MZV1rl5jPHZJJ+tqncmOSXJRzZklACwhS2zZX1lkpOq6sSqOirJM5NctmKd30/yDVV1ZFXdN8mTknx4Y4cKAFvTulvWY4w9VXVekrclOSLJhWOMa6rq3Hn5+WOMD1fVHye5OskXkrx2jPHBzRw4AGwVNcbKj58Pju3bt48dO3YckvsGgEOhqq4aY2zf3+s5ghkANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc0vFuqpOr6prq2pnVb14H+s9oapur6qnb9wQAWBrWzfWVXVEklcnOSPJyUmeVVUnr7HeLyV520YPEgC2smW2rJ+YZOcY47oxxm1JLk5y1irr/UiStyS5aQPHBwBb3jKxPi7J9Qvnd82XfVFVHZfku5Ocv68bqqpzqmpHVe3YvXv3/o4VALakZWJdq1w2Vpx/ZZIXjTFu39cNjTEuGGNsH2Ns37Zt25JDBICt7cgl1tmV5ISF88cnuXHFOtuTXFxVSXJMkjOras8Y49KNGCQAbGXLxPrKJCdV1YlJbkjyzCTPXlxhjHHi3p+r6nVJ/lCoAWBjrBvrMcaeqjov07e8j0hy4Rjjmqo6d16+z8+pAYC7Zpkt64wxLk9y+YrLVo30GON5d31YAMBejmAGAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzYg0AzYk1ADQn1gDQnFgDQHNiDQDNiTUANCfWANCcWANAc2INAM2JNQA0J9YA0JxYA0BzS8W6qk6vqmuramdVvXiV5d9XVVfPpyuq6pSNHyoAbE3rxrqqjkjy6iRnJDk5ybOq6uQVq/11kiePMR6b5GVJLtjogQLAVrXMlvUTk+wcY1w3xrgtycVJzlpcYYxxxRjjk/PZ9yQ5fmOHCQBb1zKxPi7J9Qvnd82XreX5Sf5otQVVdU5V7aiqHbt3715+lACwhS0T61rlsrHqilXflCnWL1pt+RjjgjHG9jHG9m3bti0/SgDYwo5cYp1dSU5YOH98khtXrlRVj03y2iRnjDE+sTHDAwCW2bK+MslJVXViVR2V5JlJLltcoaoeluSSJM8ZY3xk44cJAFvXulvWY4w9VXVekrclOSLJhWOMa6rq3Hn5+Ul+JsmXJnlNVSXJnjHG9s0bNgBsHTXGqh8/b7rt27ePHTt2HJL7BoBDoaquOpCNWUcwA4DmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGgObEGgObEGgCaE2sAaE6sAaA5sQaA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGhOrAGguaViXVWnV9W1VbWzql68yvKqql+bl19dVY/b+KECwNa0bqyr6ogkr05yRpKTkzyrqk5esdoZSU6aT+ck+W8bPE4A2LKW2bJ+YpKdY4zrxhi3Jbk4yVkr1jkryevH5D1Jjq6qL9/gsQLAlnTkEuscl+T6hfO7kjxpiXWOS/LxxZWq6pxMW95J8vmq+uB+jZb9dUySmw/1ILYA87z5zPHmM8cHx6MO5ErLxLpWuWwcwDoZY1yQ5IIkqaodY4ztS9w/B8gcHxzmefOZ481njg+OqtpxINdbZjf4riQnLJw/PsmNB7AOAHAAlon1lUlOqqoTq+qoJM9MctmKdS5L8tz5W+GnJvnUGOPjK28IANh/6+4GH2PsqarzkrwtyRFJLhxjXFNV587Lz09yeZIzk+xM8rkkZy9x3xcc8KhZljk+OMzz5jPHm88cHxwHNM81xp0+WgYAGnEEMwBoTqwBoLlNj7VDlW6+Jeb4++a5vbqqrqiqUw7FOO/O1pvjhfWeUFW3V9XTD+b4DhfLzHNVnVZV76uqa6rqHQd7jHd3S7xePKiq/qCq3j/P8TLfQWJBVV1YVTetdSyRA+reGGPTTpm+kPbRJF+R5Kgk709y8op1zkzyR5n+rfapSd67mWM63E5LzvHXJXnw/PMZ5njj53hhvT/L9IXLpx/qcd/dTks+l49O8qEkD5vPP+RQj/vudFpyjl+S5Jfmn7cluSXJUYd67HenU5JvTPK4JB9cY/l+d2+zt6wdqnTzrTvHY4wrxhifnM++J9O/g2d5yzyPk+RHkrwlyU0Hc3CHkWXm+dlJLhljfCxJxhjmev8sM8cjyQOqqpLcP1Os9xzcYd69jTHemWne1rLf3dvsWK91GNL9XYe17e/8PT/TOzqWt+4cV9VxSb47yfkHcVyHm2Wey49M8uCqentVXVVVzz1oozs8LDPHr0rymEwHtvpAkheMMb5wcIa3Zex395Y53OhdsWGHKmVNS89fVX1Tplh//aaO6PCzzBy/MsmLxhi3TxskHIBl5vnIJI9P8pQk90ny7qp6zxjjI5s9uMPEMnP81CTvS/LNSb4yyZ9W1bvGGJ/e5LFtJfvdvc2OtUOVbr6l5q+qHpvktUnOGGN84iCN7XCxzBxvT3LxHOpjkpxZVXvGGJcelBEeHpZ9vbh5jPHZJJ+tqncmOSWJWC9nmTk+O8kvjunD1Z1V9ddJHp3kLw/OELeE/e7eZu8Gd6jSzbfuHFfVw5JckuQ5tkAOyLpzPMY4cYzxiDHGI5K8OckPCfV+W+b14veTfENVHVlV9830FwA/fJDHeXe2zBx/LNOei1TVQzP9lajrDuooD3/73b1N3bIem3eoUmZLzvHPJPnSJK+Zt/z2DH9dZ2lLzjF30TLzPMb4cFX9cZKrk3whyWvHGP7U7pKWfC6/LMnrquoDmXbXvmiM4U9n7oequijJaUmOqapdSV6a5J7JgXfP4UYBoDlHMAOA5sQaAJoTawBoTqwBoDmxBoDmxBoAmhNrAGju/wEK/mxupnFrrAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "model = LinearRegression()\n",
    "matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\n",
    "plt.title(\"Feature importance using Lasso Model\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>39.207025</td>\n",
       "      <td>30.663397</td>\n",
       "      <td>1.094918</td>\n",
       "      <td>13270.422265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.049960</td>\n",
       "      <td>6.098187</td>\n",
       "      <td>1.205493</td>\n",
       "      <td>12110.011237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1121.873900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>26.296250</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4740.287150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>39.000000</td>\n",
       "      <td>30.400000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9382.033000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>34.693750</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>16639.912515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>64.000000</td>\n",
       "      <td>53.130000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>63770.428010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age          bmi     children       charges\n",
       "count  1338.000000  1338.000000  1338.000000   1338.000000\n",
       "mean     39.207025    30.663397     1.094918  13270.422265\n",
       "std      14.049960     6.098187     1.205493  12110.011237\n",
       "min      18.000000    15.960000     0.000000   1121.873900\n",
       "25%      27.000000    26.296250     0.000000   4740.287150\n",
       "50%      39.000000    30.400000     1.000000   9382.033000\n",
       "75%      51.000000    34.693750     2.000000  16639.912515\n",
       "max      64.000000    53.130000     5.000000  63770.428010"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1639.56310     2\n",
       "8825.08600     1\n",
       "43254.41795    1\n",
       "5257.50795     1\n",
       "1980.07000     1\n",
       "              ..\n",
       "12269.68865    1\n",
       "6360.99360     1\n",
       "7371.77200     1\n",
       "16420.49455    1\n",
       "34254.05335    1\n",
       "Name: charges, Length: 1337, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['charges'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "fit() missing 1 required positional argument: 'y'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-23-210b1cc2e659>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mrfc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mrfc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: fit() missing 1 required positional argument: 'y'"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier()\n",
    "rfc.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "scatter() missing 1 required positional argument: 'y'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-26-5d45f2dc91f9>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: scatter() missing 1 required positional argument: 'y'"
     ]
    }
   ],
   "source": [
    "plt.scatter(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x16fd98e0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualizing the distribution of age colunm\n",
    "sns.displot(df, x=\"age\", bins=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Isolate all the continuous and discrete columns\n",
    "df=df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
